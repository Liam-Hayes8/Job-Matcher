name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-west2
  GAR_LOCATION: us-west2
  REPOSITORY: job-matcher-docker
  GKE_CLUSTER: job-matcher-gke
  GKE_ZONE: us-west2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Configure Docker to use gcloud as a credential helper'
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Build Backend Docker image
      run: |
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:$GITHUB_SHA" ./backend
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:latest" ./backend

    - name: Build Frontend Docker image
      run: |
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:$GITHUB_SHA" ./frontend
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:latest" ./frontend

    - name: Build Job Finder Docker image
      run: |
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/job-finder:$GITHUB_SHA" ./job-finder
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/job-finder:latest" ./job-finder

    - name: Push Docker images
      run: |
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:latest"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:latest"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/job-finder:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/job-finder:latest"

    - name: Deploy Cloud Function
      if: github.ref == 'refs/heads/main'
      run: |
        cd functions
        gcloud functions deploy resume-parser \
          --gen2 \
          --runtime=python311 \
          --region=$REGION \
          --source=. \
          --entry-point=parse_resume \
          --trigger-bucket=$PROJECT_ID-job-matcher-resumes \
          --service-account=job-matcher-function@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars PROJECT_ID=$PROJECT_ID

    - name: Deploy Job Finder to Cloud Run
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud run deploy job-finder \
          --image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/job-finder:$GITHUB_SHA \
          --region=$REGION \
          --platform=managed \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=1 \
          --max-instances=10 \
          --min-instances=1 \
          --port=8000 \
          --set-env-vars PROJECT_ID=$PROJECT_ID \
          --service-account=job-matcher-app@$PROJECT_ID.iam.gserviceaccount.com

    - name: Update Kubernetes manifests
      if: github.ref == 'refs/heads/main'
      run: |
        sed -i "s|PROJECT_ID|$PROJECT_ID|g" k8s/*.yaml
        sed -i "s|REGION|$REGION|g" k8s/*.yaml
        sed -i "s|backend:latest|backend:$GITHUB_SHA|g" k8s/backend-deployment.yaml
        sed -i "s|frontend:latest|frontend:$GITHUB_SHA|g" k8s/frontend-deployment.yaml

    - name: Deploy to GKE
      if: github.ref == 'refs/heads/main'
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/serviceaccount.yaml
        kubectl apply -f k8s/secret-provider-class.yaml
        kubectl apply -f k8s/backend-service.yaml
        kubectl apply -f k8s/frontend-service.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Verify deployment
      if: github.ref == 'refs/heads/main'
      run: |
        kubectl rollout status deployment/job-matcher-backend -n job-matcher --timeout=300s
        kubectl rollout status deployment/job-matcher-frontend -n job-matcher --timeout=300s
        kubectl get services -n job-matcher

  terraform:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"

    - name: Terraform Init
      working-directory: ./infra
      run: terraform init
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}

    - name: Terraform Plan
      working-directory: ./infra
      run: terraform plan
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Apply
      working-directory: ./infra
      run: terraform apply -auto-approve
      env:
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}